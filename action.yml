name: "Release Docs"
description: "Automatically generate comprehensive release documentation with JIRA integration, Confluence publishing, Slack notifications, and smart version fallback when version files are missing"
author: "Release Automation Team"

branding:
  icon: "file-text"
  color: "blue"

inputs:
  # Version Configuration
  version-file:
    description: 'Path to version file (pubspec.yaml, package.json, etc.). If file doesn''t exist or version cannot be extracted, falls back to date-time version'
    required: false
    default: 'pubspec.yaml'
  version-pattern:
    description: 'Regex pattern to extract version from file'
    required: false
    default: 'version:\s*(.+)'
  fallback-version-format:
    description: 'Date format for fallback version when version file is missing (default: YYYY.MM.DD.HHMM)'
    required: false
    default: '%Y.%m.%d.%H%M'

  # Git Configuration
  commit-range:
    description: "Git commit range for release notes (auto-detected if not provided)"
    required: false
  max-commits:
    description: "Maximum number of commits to analyze"
    required: false
    default: "100"

  # Ticket Integration
  ticket-pattern:
    description: 'Regex pattern for ticket detection (e.g., JIRA-\\d+, MDO-\\d+)'
    required: false
    default: "MDO-[0-9]+"
  ticket-base-url:
    description: "Base URL for ticket links (e.g., https://company.atlassian.net/browse/)"
    required: false
    default: "https://musterdekho.atlassian.net/browse/"

  # Release Categories
  enable-categories:
    description: "Enable automatic categorization of commits"
    required: false
    default: "true"
  category-config:
    description: "JSON configuration for commit categories"
    required: false

  # Confluence Integration
  confluence-enabled:
    description: "Enable Confluence integration"
    required: false
    default: "false"
  confluence-base-url:
    description: "Confluence base URL"
    required: false
  confluence-email:
    description: "Confluence user email"
    required: false
  confluence-api-token:
    description: "Confluence API token"
    required: false
  confluence-space-key:
    description: "Confluence space key"
    required: false
    default: "DEV"
  confluence-parent-page-id:
    description: "Parent page ID for release notes"
    required: false

  # Slack Integration
  slack-enabled:
    description: "Enable Slack notifications"
    required: false
    default: "false"
  slack-webhook:
    description: "Slack webhook URL"
    required: false
  slack-channel:
    description: "Slack channel name"
    required: false
  slack-icon:
    description: "Slack notification icon URL"
    required: false
  project-name:
    description: "Project name for notifications"
    required: false
  app-short-name:
    description: "Short app name for notifications"
    required: false

  # Git Tagging
  create-tag:
    description: "Create git tag for release"
    required: false
    default: "true"
  tag-prefix:
    description: "Prefix for git tags"
    required: false
    default: "v"
  tag-suffix:
    description: "Suffix for git tags (e.g., -pilot, -beta)"
    required: false

  # Output Configuration
  output-format:
    description: "Output format: markdown, confluence, both"
    required: false
    default: "both"
  include-summary:
    description: "Include release summary in output"
    required: false
    default: "true"

outputs:
  release-notes-path:
    description: "Path to generated release notes file"
  confluence-url:
    description: "URL to Confluence page (if enabled)"
  tag-name:
    description: "Created git tag name"
  tag-created:
    description: "Whether a new tag was created"
  release-version:
    description: "Extracted release version"
  total-commits:
    description: "Total number of commits analyzed"
  ticket-count:
    description: "Number of unique tickets found"

runs:
  using: "composite"
  steps:  
    - name: Setup Environment
      shell: bash
      run: |        echo "🚀 Smart Release Documentation Generator"
        echo "Setting up environment variables..."
        
        # Set default values
        echo "VERSION_FILE=${{ inputs.version-file }}" >> $GITHUB_ENV
        echo "VERSION_PATTERN=${{ inputs.version-pattern }}" >> $GITHUB_ENV
        echo "FALLBACK_VERSION_FORMAT=${{ inputs.fallback-version-format }}" >> $GITHUB_ENV
        echo "COMMIT_RANGE=${{ inputs.commit-range }}" >> $GITHUB_ENV
        echo "MAX_COMMITS=${{ inputs.max-commits }}" >> $GITHUB_ENV
        echo "TICKET_PATTERN=${{ inputs.ticket-pattern }}" >> $GITHUB_ENV
        echo "TICKET_BASE_URL=${{ inputs.ticket-base-url }}" >> $GITHUB_ENV
        echo "ENABLE_CATEGORIES=${{ inputs.enable-categories }}" >> $GITHUB_ENV
        echo "OUTPUT_FORMAT=${{ inputs.output-format }}" >> $GITHUB_ENV
        echo "INCLUDE_SUMMARY=${{ inputs.include-summary }}" >> $GITHUB_ENV
        echo "CREATE_TAG=${{ inputs.create-tag }}" >> $GITHUB_ENV
        echo "TAG_PREFIX=${{ inputs.tag-prefix }}" >> $GITHUB_ENV
        echo "TAG_SUFFIX=${{ inputs.tag-suffix }}" >> $GITHUB_ENV
        
        # Set category configuration
        if [ -n "${{ inputs.category-config }}" ]; then
          echo "CATEGORY_CONFIG=${{ inputs.category-config }}" >> $GITHUB_ENV
        else
          echo 'CATEGORY_CONFIG={"features":{"keywords":["feat","feature","add","new"],"emoji":"🚀","title":"New Features","max_entries":20},"bugs":{"keywords":["fix","bug","issue","hotfix"],"emoji":"🐛","title":"Bug Fixes","max_entries":20},"improvements":{"keywords":["improve","enhancement","optimize","refactor"],"emoji":"⚡","title":"Improvements","max_entries":15},"docs":{"keywords":["docs","documentation","readme"],"emoji":"📚","title":"Documentation","max_entries":10}}' >> $GITHUB_ENV
        fi
        
        # Confluence settings
        echo "CONFLUENCE_ENABLED=${{ inputs.confluence-enabled }}" >> $GITHUB_ENV
        echo "CONFLUENCE_BASE_URL=${{ inputs.confluence-base-url }}" >> $GITHUB_ENV
        echo "CONFLUENCE_EMAIL=${{ inputs.confluence-email }}" >> $GITHUB_ENV
        echo "CONFLUENCE_API_TOKEN=${{ inputs.confluence-api-token }}" >> $GITHUB_ENV
        echo "CONFLUENCE_SPACE_KEY=${{ inputs.confluence-space-key }}" >> $GITHUB_ENV
        echo "CONFLUENCE_PARENT_PAGE_ID=${{ inputs.confluence-parent-page-id }}" >> $GITHUB_ENV
        
        # Slack settings
        echo "SLACK_ENABLED=${{ inputs.slack-enabled }}" >> $GITHUB_ENV
        echo "SLACK_WEBHOOK=${{ inputs.slack-webhook }}" >> $GITHUB_ENV
        echo "SLACK_CHANNEL=${{ inputs.slack-channel }}" >> $GITHUB_ENV
        echo "SLACK_ICON=${{ inputs.slack-icon }}" >> $GITHUB_ENV
        echo "PROJECT_NAME=${{ inputs.project-name }}" >> $GITHUB_ENV
        echo "APP_SHORT_NAME=${{ inputs.app-short-name }}" >> $GITHUB_ENV
        
        # Initialize output variables with defaults
        echo "TOTAL_COMMITS_ANALYZED=0" >> $GITHUB_ENV
        echo "TICKET_COUNT=0" >> $GITHUB_ENV
        echo "TAG_CREATED=false" >> $GITHUB_ENV
        echo "TAG_NAME=" >> $GITHUB_ENV
        echo "CONFLUENCE_URL=" >> $GITHUB_ENV
        echo "RELEASE_HIGHLIGHTS=" >> $GITHUB_ENV
        echo "TICKETS_LIST=" >> $GITHUB_ENV
        echo "COMMIT_RANGE_USED=" >> $GITHUB_ENV

    - name: Extract Version
      shell: bash
      run: |        echo "📋 Extracting version from $VERSION_FILE..."
        VERSION=""
        
        if [ -f "$VERSION_FILE" ]; then
          if [[ "$VERSION_FILE" == *.json ]]; then
            # Handle package.json
            VERSION=$(grep -m1 '"version"' "$VERSION_FILE" | sed 's/.*"version":\s*"\([^"]*\)".*/\1/' 2>/dev/null || echo "")
          else
            # Handle other files with version pattern
            VERSION=$(grep -m1 -E "$VERSION_PATTERN" "$VERSION_FILE" | sed -E "s/.*$VERSION_PATTERN.*/\1/" | tr -d "'" | tr -d '"' | xargs 2>/dev/null || echo "")
          fi
        fi
        
        # Fallback to date-time version if no version found
        if [ -z "$VERSION" ]; then
          # Generate version based on current date/time using custom format
          DATETIME_VERSION=$(date -u +"$FALLBACK_VERSION_FORMAT")
          VERSION="$DATETIME_VERSION"
          
          if [ ! -f "$VERSION_FILE" ]; then
            echo "⚠️ Version file $VERSION_FILE not found"
          else
            echo "⚠️ Could not extract version from $VERSION_FILE"
          fi
          
          echo "🕒 Using date-time based version: $VERSION"
          echo "💡 Format: $FALLBACK_VERSION_FORMAT (UTC)"
        else
          echo "✅ Extracted version from file: $VERSION"
        fi

        echo "APP_VERSION=$VERSION" >> $GITHUB_ENV
        echo "📦 Final version: $VERSION"

    - name: Setup Git Configuration
      shell: bash
      run: |
        echo "🔧 Setting up Git configuration..."

        # Ensure we're in a git repository
        if ! git rev-parse --git-dir > /dev/null 2>&1; then
          echo "❌ Not in a git repository"
          exit 1
        fi

        # Configure git for actions
        git config --global --add safe.directory "$GITHUB_WORKSPACE"
        git config --global user.email "action@github.com"
        git config --global user.name "GitHub Action"

        # Get commit info
        echo "COMMITTER_NAME=$(git log -1 --pretty=%an)" >> $GITHUB_ENV
        echo "SHORT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

        echo "✅ Git configuration completed"

    - name: Generate Release Notes
      shell: bash
      run: |
        echo "📝 Generating release notes..."
        echo "🔍 Debug: Checking script availability..."
        
        if [ ! -f "${{ github.action_path }}/scripts/generate-release-notes.sh" ]; then
          echo "❌ Script not found: ${{ github.action_path }}/scripts/generate-release-notes.sh"
          echo "📁 Action path contents:"
          ls -la "${{ github.action_path }}"
          echo "📁 Scripts directory:"
          ls -la "${{ github.action_path }}/scripts/" 2>/dev/null || echo "Scripts directory not found"
          exit 1
        fi
        
        echo "✅ Script found, sourcing..."
        # Source the release notes generation script
        source "${{ github.action_path }}/scripts/generate-release-notes.sh"
        
        echo "✅ Script sourced, calling function..."        # Call the main function
        generate_release_notes

    - name: Convert to Confluence Format
      if: env.CONFLUENCE_ENABLED == 'true' || env.OUTPUT_FORMAT == 'confluence' || env.OUTPUT_FORMAT == 'both'
      shell: bash
      run: |
        echo "🔄 Converting to Confluence format..."

        # Source the confluence conversion script
        source "${{ github.action_path }}/scripts/confluence-converter.sh"

        # Call the conversion function
        convert_to_confluence

    - name: Upload to Confluence
      if: env.CONFLUENCE_ENABLED == 'true'
      shell: bash
      run: |
        echo "📤 Uploading to Confluence..."

        # Source the confluence upload script
        source "${{ github.action_path }}/scripts/confluence-upload.sh"

        # Call the upload function
        upload_to_confluence

    - name: Create Git Tag
      if: env.CREATE_TAG == 'true'
      shell: bash
      run: |
        echo "🏷️ Creating git tag..."

        # Source the tagging script
        source "${{ github.action_path }}/scripts/create-tag.sh"

        # Call the tagging function
        create_release_tag

    - name: Send Slack Notification
      if: env.SLACK_ENABLED == 'true'
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_WEBHOOK: ${{ env.SLACK_WEBHOOK }}
        SLACK_CHANNEL: ${{ env.SLACK_CHANNEL }}
        SLACK_COLOR: ${{ job.status == 'success' && 'good' || 'danger' }}
        SLACK_ICON: ${{ env.SLACK_ICON }}
        SLACK_MESSAGE: |
          🚀 *New ${{ env.PROJECT_NAME }} Release*
          • *Version:* v${{ env.APP_VERSION }} (commit: ${{ env.SHORT_SHA }})
          • *Built by:* ${{ env.COMMITTER_NAME }}

          ${{ env.RELEASE_HIGHLIGHTS }}

          ${{ env.CONFLUENCE_URL && format('*📖 Release Notes:* {0}', env.CONFLUENCE_URL) || '' }}
        SLACK_TITLE: ${{ env.PROJECT_NAME }} - New Release Available
        SLACK_USERNAME: ${{ env.APP_SHORT_NAME }} Release Bot

    - name: Set Outputs
      shell: bash
      run: |
        echo "📤 Setting action outputs..."

        echo "release-notes-path=release-notes/release-notes-v${APP_VERSION}.md" >> $GITHUB_OUTPUT
        echo "release-version=${APP_VERSION}" >> $GITHUB_OUTPUT
        echo "total-commits=${TOTAL_COMMITS_ANALYZED:-0}" >> $GITHUB_OUTPUT
        echo "ticket-count=${TICKET_COUNT:-0}" >> $GITHUB_OUTPUT

        if [ -n "${TAG_NAME:-}" ]; then
          echo "tag-name=${TAG_NAME}" >> $GITHUB_OUTPUT
          echo "tag-created=${TAG_CREATED:-false}" >> $GITHUB_OUTPUT
        else
          echo "tag-name=" >> $GITHUB_OUTPUT
          echo "tag-created=false" >> $GITHUB_OUTPUT
        fi

        if [ -n "${CONFLUENCE_URL:-}" ]; then
          echo "confluence-url=${CONFLUENCE_URL}" >> $GITHUB_OUTPUT
        else
          echo "confluence-url=" >> $GITHUB_OUTPUT
        fi

        echo "✅ All outputs set successfully"
