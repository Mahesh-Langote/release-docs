#!/bin/bash

# Smart Release Documentation Generator - Git Tagging Script
# Creates release tags with comprehensive metadata

create_release_tag() {
    echo "üè∑Ô∏è Creating release tag..."
    
    # Construct tag name
    local tag_name="${TAG_PREFIX}${APP_VERSION}${TAG_SUFFIX}"
    
    echo "üìã Tag configuration:"
    echo "  - Tag name: $tag_name"
    echo "  - Version: $APP_VERSION"
    echo "  - Prefix: $TAG_PREFIX"
    echo "  - Suffix: $TAG_SUFFIX"
    
    # Check if tag already exists
    if git tag -l | grep -q "^${tag_name}$"; then
        echo "‚ö†Ô∏è Tag $tag_name already exists"
        echo "TAG_CREATED=false" >> $GITHUB_ENV
        echo "TAG_NAME=$tag_name" >> $GITHUB_ENV
        return 0
    fi
    
    # Create comprehensive tag message
    local tag_message="Release v${APP_VERSION}

üöÄ Release Summary:
- Version: v${APP_VERSION}
- Commits analyzed: ${TOTAL_COMMITS_ANALYZED}
- Commit range: ${COMMIT_RANGE_USED}
- Tickets found: ${TICKET_COUNT}

üìä Statistics:
- Generated on: $(date +'%Y-%m-%d %H:%M:%S UTC')
- Generated by: ${COMMITTER_NAME}
- Repository: ${GITHUB_REPOSITORY:-Unknown}
- Workflow: ${GITHUB_WORKFLOW:-Unknown}

üé´ Tickets in this release:
${TICKETS_LIST}

üîó Links:"
    
    # Add Confluence link if available
    if [ -n "$CONFLUENCE_URL" ]; then
        tag_message+="
- üìñ Release Notes: $CONFLUENCE_URL"
    fi
    
    tag_message+="

üìù Release Highlights:
${RELEASE_HIGHLIGHTS}

---
Auto-generated by Smart Release Documentation Generator
https://github.com/marketplace/actions/smart-release-documentation-generator"
    
    # Create annotated tag
    echo "üè∑Ô∏è Creating annotated tag: $tag_name"
    
    if git tag -a "$tag_name" -m "$tag_message"; then
        echo "‚úÖ Tag $tag_name created successfully"
        
        # Push tag to remote
        echo "üì§ Pushing tag to remote repository..."
        if git push origin "$tag_name"; then
            echo "‚úÖ Tag $tag_name pushed to remote"
        else
            echo "‚ö†Ô∏è Failed to push tag to remote (this may be expected in some CI environments)"
        fi
        
        # Set environment variables
        echo "TAG_CREATED=true" >> $GITHUB_ENV
        echo "TAG_NAME=$tag_name" >> $GITHUB_ENV
        
        # Verify tag creation
        if git show --name-only "$tag_name" > /dev/null 2>&1; then
            echo "‚úÖ Tag verification successful"
            
            # Get tag details
            local tag_commit=$(git rev-list -n 1 "$tag_name")
            local tag_date=$(git log -1 --format="%ai" "$tag_name")
            
            echo "üìã Tag details:"
            echo "  - Commit: $tag_commit"
            echo "  - Date: $tag_date"
            
            # Add tag info to release highlights
            local current_highlights="$RELEASE_HIGHLIGHTS"
            local new_highlights="${current_highlights}\\n‚Ä¢ üè∑Ô∏è Tagged as: $tag_name"
            echo "RELEASE_HIGHLIGHTS=$new_highlights" >> $GITHUB_ENV
            
        else
            echo "‚ùå Tag verification failed"
            exit 1
        fi
        
    else
        echo "‚ùå Failed to create tag $tag_name"
        exit 1
    fi
}

# Helper function to validate tag name
validate_tag_name() {
    local tag_name="$1"
    
    # Check for valid tag name format
    if [[ ! "$tag_name" =~ ^[a-zA-Z0-9][a-zA-Z0-9._-]*$ ]]; then
        echo "‚ùå Invalid tag name format: $tag_name"
        echo "Tag names should start with alphanumeric and contain only alphanumeric, dots, hyphens, and underscores"
        return 1
    fi
    
    # Check tag name length
    if [ ${#tag_name} -gt 100 ]; then
        echo "‚ùå Tag name too long (max 100 characters): $tag_name"
        return 1
    fi
    
    return 0
}

# Helper function to list recent tags
list_recent_tags() {
    echo "üìã Recent tags in repository:"
    
    local recent_tags=$(git tag -l --sort=-version:refname | head -10)
    
    if [ -n "$recent_tags" ]; then
        echo "$recent_tags" | while read -r tag; do
            local tag_date=$(git log -1 --format="%ai" "$tag" 2>/dev/null || echo "Unknown")
            echo "  - $tag ($tag_date)"
        done
    else
        echo "  No tags found in repository"
    fi
}

# Helper function to get tag information
get_tag_info() {
    local tag_name="$1"
    
    if git tag -l | grep -q "^${tag_name}$"; then
        echo "üìã Tag information for: $tag_name"
        
        local tag_commit=$(git rev-list -n 1 "$tag_name")
        local tag_date=$(git log -1 --format="%ai" "$tag_name")
        local tag_message=$(git tag -l --format='%(contents)' "$tag_name")
        
        echo "  - Commit: $tag_commit"
        echo "  - Date: $tag_date"
        echo "  - Message preview: $(echo "$tag_message" | head -1)"
    else
        echo "‚ùå Tag not found: $tag_name"
        return 1
    fi
}
