#!/bin/bash

# Smart Release Documentation Generator - Confluence Converter Script
# Converts Markdown release notes to Confluence Wiki Markup

convert_to_confluence() {
    echo "🔄 Converting Markdown to Confluence Wiki Markup..."
    
    local markdown_file="release-notes/release-notes-v${APP_VERSION}.md"
    local confluence_file="release-notes/confluence-release-notes-v${APP_VERSION}.txt"
    
    if [ ! -f "$markdown_file" ]; then
        echo "❌ Markdown file not found: $markdown_file"
        exit 1
    fi
    
    # Read the markdown content
    local markdown_content=$(cat "$markdown_file")
    
    # Convert Markdown to Confluence Wiki Markup
    local confluence_content=$(echo "$markdown_content" | \
        # Convert headers
        sed 's/^# \(.*\)/h1. \1/' | \
        sed 's/^## \(.*\)/h2. \1/' | \
        sed 's/^### \(.*\)/h3. \1/' | \
        sed 's/^#### \(.*\)/h4. \1/' | \
        sed 's/^##### \(.*\)/h5. \1/' | \
        sed 's/^###### \(.*\)/h6. \1/' | \
        # Convert lists
        sed 's/^\* \(.*\)/\* \1/' | \
        sed 's/^   - \(.*\)/\*\* \1/' | \
        sed 's/^      - \(.*\)/\*\*\* \1/' | \
        # Convert links
        sed 's/\[\([^]]*\)\](\([^)]*\))/[\1|\2]/g' | \
        # Convert code blocks
        sed 's/`\([^`]*\)`/{code}\1{code}/g' | \
        # Convert bold text
        sed 's/\*\*\([^*]*\)\*\*/\*\1\*/g' | \
        # Convert italic text
        sed 's/\*\([^*]*\)\*/\_\1\_/g')
    
    # Extract unique tickets for JIRA macro
    local unique_tickets=$(echo "$markdown_content" | grep -oE "$TICKET_PATTERN" | sort -u | tr '\n' ',' | sed 's/,$//')
    
    # Create enhanced Confluence content
    local confluence_final=""
    
    # Add release information panel
    confluence_final+="{panel:title=Release Information|borderColor=#0747A6|titleBGColor=#0747A6|bgColor=#F4F5F7|borderWidth=2px}\n"
    confluence_final+="*Version:* v${APP_VERSION}\n"
    confluence_final+="*Release Date:* $(date +'%B %d, %Y')\n"
    confluence_final+="*Build Environment:* ${GITHUB_REF_NAME:-main}\n"
    confluence_final+="*Commits Analyzed:* ${TOTAL_COMMITS_ANALYZED}\n"
    confluence_final+="*Commit Range:* \`${COMMIT_RANGE_USED}\`\n"
    confluence_final+="*Tickets Found:* ${TICKET_COUNT}\n"
    confluence_final+="*Generated By:* ${COMMITTER_NAME}\n"
    confluence_final+="{panel}\n\n"
    
    # Add JIRA tickets summary if tickets exist
    if [ -n "$unique_tickets" ] && [ "$TICKET_COUNT" -gt 0 ]; then
        confluence_final+="h2. 🎫 JIRA Tickets Summary\n\n"
        confluence_final+="{jira:key in ($unique_tickets)|columns=key,summary,status,assignee,priority}\n\n"
    fi
    
    # Add quick navigation
    confluence_final+="h2. 📋 Quick Navigation\n\n"
    confluence_final+="{toc:printable=true|style=square|maxLevel=3|indent=20px|minLevel=2|class=bigpink}\n\n"
    
    # Add the converted content
    confluence_final+="$confluence_content"
    
    # Add footer with metadata
    confluence_final+="\n\n{panel:title=Generation Details|borderColor=#36B37E|titleBGColor=#36B37E|bgColor=#F4F5F7}\n"
    confluence_final+="*Generated:* $(date +'%Y-%m-%d %H:%M:%S UTC')\n"
    confluence_final+="*Generator:* Smart Release Documentation Generator\n"
    confluence_final+="*Repository:* ${GITHUB_REPOSITORY:-Unknown}\n"
    confluence_final+="*Commit:* ${GITHUB_SHA:-Unknown}\n"
    confluence_final+="{panel}\n"
    
    # Save to file
    echo -e "$confluence_final" > "$confluence_file"
    
    # Store in environment for upload step
    echo "CONFLUENCE_CONTENT<<EOF" >> $GITHUB_ENV
    echo -e "$confluence_final" >> $GITHUB_ENV
    echo "EOF" >> $GITHUB_ENV
    
    echo "✅ Confluence conversion completed!"
    echo "📄 Generated file: $confluence_file"
}

# Helper function to escape special characters for Confluence
escape_confluence_content() {
    local content="$1"
    
    # Escape special Confluence characters
    content=$(echo "$content" | \
        sed 's/{/{\\{/g' | \
        sed 's/}/\\}}/g' | \
        sed 's/\[/\\[/g' | \
        sed 's/\]/\\]/g')
    
    echo "$content"
}

# Helper function to create Confluence table from data
create_confluence_table() {
    local headers="$1"
    local data="$2"
    
    local table="||$headers||\n"
    
    echo "$data" | while IFS='|' read -r row; do
        table+="|$row|\n"
    done
    
    echo -e "$table"
}
